
(* Abstract spec of leader election problem 
 *)

module LeaderElect

  use int.Int
  use map.Map

  type node = int
  val constant n_nodes : int
  axiom n_nodes_ax : 3 <= n_nodes
  

  (* System configurations
   *)
  type world = { isLeader : map node bool }


  (* System INIT 
   *)
  predicate initWorld_p (w:world) =
            forall n :node. 0<=n<n_nodes -> w.isLeader[n] = false

  let ghost predicate initWorld (w:world) = initWorld_p w


  (* Inductive invariant 
   *) 
  predicate inv (w:world) = forall i, j :node.
    0<=i<n_nodes /\ 0<=j<n_nodes /\ w.isLeader[i] /\ w.isLeader[j] -> i=j


  (* System action
   *)
  predicate act_enbld (w:world) (h:node) = 
    0 <= h < n_nodes
      /\ 
    forall i :node. 0<=i<n_nodes -> not isLeader w i 

  let ghost function act (w:world) (h:node) : world
    requires { act_enbld w h }
    ensures  { inv w -> inv result }
  = { isLeader = w.isLeader[h<-true] }


  (* Transition relation
   *)
  inductive stepind world world =
  | step_msg : forall w :world, n :node.
      act_enbld w n -> stepind w (act w n)

  let ghost predicate step (w1:world) (w2:world) = stepind w1 w2 


  (* Proof of inductiveness 
   *)
  clone export inductiveness.Inductiveness with
    type world,
    predicate inv,
    val step,
    val initWorld


end
