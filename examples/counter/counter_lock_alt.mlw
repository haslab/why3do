
(* Implementation of concurrent counter, assuming atomic updates are not available.
   Threads have a local copy of the counter; access to to the shared counter 
   variable is controled using a lock. 
   We prove that this refines the abstract counter spec. 
 *)

module CounterImpl

  use counter_alt.Counter

  type state = Start | Inc | Done
  type lock = Unlocked | Locked thread

  (* System configurations
   *)
  type world = { pcc :map thread state ;
       	       	 counterc :int ;
		 tmp :map thread int ;
		 lock :lock }
  


  (* Refinement mapping
   *) 
  let function refn (w:world) : Counter.world
  = let pc' (t:thread) = match w.pcc[t] with
                         | Done -> Counter.Done
			 | _ -> Counter.Start
			 end
    in { pc = pc' ; counter = w.counterc  }


  (* Inductive invariant 
     required to prove refinement conditions
   *)
  predicate inv (w:world) = 
    forall t :thread. 0<=t<n_threads -> 
      w.lock = Locked t -> w.tmp[t] = w.counterc


  (* System INIT 
   *)
  predicate initWorld_p (w:world) = 
    w.pcc = const Start /\ w.counterc = 0 /\ w.tmp = const 0 /\ w.lock = Unlocked 

  let ghost predicate initWorld (w:world)
    ensures { result -> inv w }
    ensures { result -> Counter.initWorld (refn w) }
  = initWorld_p w 
    

  (* System actions
   *)

  (* 1. If in Start state and unlocked: 
        copy global counter to local; 
	lock and move into Inc State
   *)
  predicate transSI_enbld (w:world) (t:thread) =
    0<=t<n_threads /\
    w.pcc[t] = Start /\ 
    w.lock = Unlocked

  let ghost function transSI (w:world) (t:thread) : world
    requires { transSI_enbld w t }
    ensures  { inv w -> inv result }
    ensures  { inv w -> refn result = refn w \/ Counter.stepind (refn w) (refn result) }
  = { pcc=set (w.pcc) t Inc ; counterc=w.counterc ; tmp=set (w.tmp) t (w.counterc) ; lock=Locked t }


  (* 2. If in Inc state and thread owns lock: 
        set global counter as local+1; 
	lock and move into Done
   *)
  predicate transID_enbld (w:world) (t:thread)  = 
    0<=t<n_threads /\
    w.pcc[t] = Inc /\ 
    w.lock = Locked t 
 
  let ghost function transID (w:world) (t:thread) : world
    requires { transID_enbld w t }
    ensures  { inv w -> inv result }
    ensures  { inv w -> refn result = refn w \/ Counter.stepind (refn w) (refn result) }
    (* ensures  { inv w -> result.counterc = w.counterc + 1 } *)
  = { pcc=set (w.pcc) t Done ; counterc=w.tmp[t] + 1 ; tmp=w.tmp ; lock=Unlocked }


  (* Transition relation
   *)
  inductive stepind world world =
  | trans_SI : forall w :world, t :thread.
      transSI_enbld w t -> stepind w  (transSI w  t)
  | trans_ID : forall w :world, t :thread.
      transID_enbld w t -> stepind w  (transID w  t)

  let ghost predicate step (w1:world) (w2:world) = stepind w1 w2 


  (* Proof of refinement 
   *)
  clone refinement.Refinement with
    type worldC=world, type worldA=Counter.world, val refn,
    predicate invC=inv, predicate invA=Counter.inv,
    val initWorldC=initWorld, val initWorldA=Counter.initWorld,
    val stepC=step, val stepA=Counter.step

  lemma safety_by_refinement : forall w :world. reachableC w -> reachableA (refn w)

  (* Value of counter if all threads terminate.
     Obtained from the refinement
   *) 
  lemma correctness : forall w :world. reachableC w ->
  	(forall t :thread. 0<=t<n_threads -> w.pcc[t]=Done) 
           -> w.counterc = n_threads

end



