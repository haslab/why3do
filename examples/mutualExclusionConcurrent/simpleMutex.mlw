

(* Simple mutex algorithm, 2 processes
 *)

module SimpleMutex
  use bool.Bool
  use map.Map
  use map.Const

  use mutexAbstract.MutexAbstract

  type state = A | B | CS | Done


  (* System configurations
   *)
  type world = { pc : map proc state ;
       	       	 trying : map proc bool }


  (* Refinement mapping 
   *)
  function mapSt (st:state) : MutexAbstractN.state =
  match st with
  | A -> MutexAbstractN.Init
  | B -> MutexAbstractN.Init
  | CS -> MutexAbstractN.CS
  | Done -> MutexAbstractN.Done
  end

  let ghost function refn (w:world) : MutexAbstract.world 
  = { pc_a = fun p -> mapSt w.pc[p] }


  (* inductive invariant enabling the refinement proof
   *)
  predicate inv (w:world) = forall p :proc.
    w.pc[p] = B  \/ w.pc[p] = CS -> w.trying[p]


  (* System INIT 
   *)
  predicate initWorld_p (w:world) =
    w.pc = const A /\ w.trying = const false
  
  let ghost predicate initWorld (w:world) = initWorld_p w


  (* Action functions
   *)
   
  predicate a_enbld (w:world) (p:proc) = 
    w.pc[p] = A
  let ghost function a (w:world) (p:proc) : world
    requires { a_enbld w p }
    ensures  { inv w -> inv result }
    ensures  { inv w -> refn result = refn w \/ step (refn w) (refn result) }
  = { pc = (w.pc)[p<-B] ; trying = w.trying[p<-true] }


  predicate b_enbld (w:world) (p:proc) = 
    w.pc[p] = B /\ not w.trying[other p]
  let ghost function b (w:world) (p:proc) : world
    requires { b_enbld w p }
    ensures  { inv w -> inv result }
    ensures  { inv w -> refn result = refn w \/ step (refn w) (refn result) }
  = { pc = w.pc[p<-CS] ; trying = w.trying }


  predicate cs_enbld (w:world) (p:proc) = 
    w.pc[p] = CS 
  let ghost function cs (w:world) (p:proc) : world
    requires { cs_enbld w p }
    ensures  { inv w -> inv result }
    ensures  { inv w -> refn result = refn w \/ step (refn w) (refn result) }
  = { pc = w.pc[p<-Done] ; trying = w.trying }


  (* Transition relation
   *)
  inductive stepind world world =
  | a : forall w :world, p :proc.
      a_enbld w p -> stepind w (a w p)
  | b : forall w :world, p :proc.
      b_enbld w p -> stepind w (b w p)
  | trans : forall w :world, p :proc.
      cs_enbld w p -> stepind w (cs w p)

  let ghost predicate step (w1:world) (w2:world) = stepind w1 w2 

  (* Proof of refinement 
   *)
  clone export refinement.Refinement with
    type worldC=world, type worldA=MutexAbstract.world, val refn,
    predicate invC=inv, predicate invA=MutexAbstract.inv,
    val initWorldC=initWorld, val initWorldA=MutexAbstract.initWorld,
    val stepC=step, val stepA=MutexAbstract.step


  (* Safety Propertya
   *)
  lemma safety : forall w :world. reachableC w ->
    not (w.pc[Zero] = CS /\ w.pc[One] = CS)

  function fullrefn (w:world) : MutexAbstractN.world =
    MutexAbstract.refn(refn w)

  lemma safetyA : forall w :world. reachableC w ->
    MutexAbstractN.atMostOneCS (fullrefn w) 


end

