

(* Abstract spec of mutual exclusion problem, 
   two concurrent processes  
   Refinement of N-process spec MutexAbstractN,
   instantiates type proc; system configurations are the same
   and refinement maping is identity
 *)

module MutexAbstract

  use bool.Bool
  use map.Map
  use map.Const

  type proc = Zero | One 
  function other (p: proc) : proc =
    match p with | Zero -> One | One -> Zero end

  clone mutexAbstractN.MutexAbstractN with type proc


  (* System configurations
   *)
  type world = { pc_a : map proc state }


  (* Refinement mapping 
     identity function
   *)
  let ghost function refn (w:world) : MutexAbstractN.world 
  = { pc_n = w.pc_a }


  (* System INIT 
   *)
  predicate initWorld_p (w:world) = w.pc_a = const Init 

  let ghost predicate initWorld (w:world) = initWorld_p w


  (* Inductive invariant
   *)
  predicate inv (w:world) = forall p :proc. 
     w.pc_a[p] = CS -> w.pc_a[other p] <> CS


  (* System actions
   *)

  (* Enter CS if other process hasn't.
     No other action is available in the Init state, 
     process blocks if action not enabled
   *)
  predicate i_enbld (w:world) (p:proc) =
    w.pc_a[p] = Init /\ w.pc_a[other p] <> CS 

  let ghost function i (w:world) (p:proc) : world
    requires { i_enbld w p }
    ensures  { inv w -> inv result }
    ensures  { inv w -> refn result = refn w \/ step (refn w) (refn result) }
  = { pc_a = (w.pc_a)[p<-CS] }


  (* Exit CS 
   *)
  predicate cs_enbld (w:world) (p:proc) = 
    w.pc_a[p] = CS 

  let ghost function cs (w:world) (p:proc) : world
    requires { cs_enbld w p }
    ensures  { inv w -> inv result }
    ensures  { inv w -> refn result = refn w \/ step (refn w) (refn result) }
  = { pc_a = w.pc_a[p<-Done] }



  (* Transition relation
   *)
  inductive stepind world world =
  | i : forall w :world, p :proc.
      i_enbld w p -> stepind w (i w p)
  | cs : forall w :world, p :proc.
      cs_enbld w p -> stepind w (cs w p)

  let ghost predicate step (w1:world) (w2:world) = stepind w1 w2 


  (* proof of refinement 
   *)
  clone export refinement.Refinement with
    type worldC=world, type worldA=MutexAbstractN.world, val refn,
    predicate invC=inv, predicate invA=MutexAbstractN.inv,
    val initWorldC=initWorld, val initWorldA=MutexAbstractN.initWorld,
    val stepC=step, val stepA=MutexAbstractN.step


  (* Safety Property
   *)
  lemma safety : forall w :world. reachableC w -> atMostOneCS (refn w) 


end

