

(* Abstract spec of mutual exclusion problem, 
   two concurrent processes  
 *)


module MutexAbstract

  use export bool.Bool
  use export map.Map
  use export map.Const

  type proc = Zero | One 
  function other (p: proc) : proc =
    match p with | Zero -> One | One -> Zero end

  type state = Init | CS | Done


  (* System configurations
   *)
  type world = { pc_a : map proc state }


  (* System INIT 
   *)
  predicate initWorld_p (w:world) = w.pc_a = const Init 

  let ghost predicate initWorld (w:world) = initWorld_p w


  (* Inductive invariant.
     Not required to prove the safety property 
   *)
  predicate inv (w:world) = forall p :proc.
     w.pc_a[p] = CS -> w.pc_a[other p] <> CS



  (* Actions
   *)

  (* Enters CS if other process hasn't.
     No other action is available in the Init state, 
     process blocks if action ot enabled
   *)
  predicate i_enbld (w:world) (p:proc) = 
    w.pc_a[p] = Init /\ w.pc_a[other p] <> CS 

  let ghost function i (w:world) (p:proc) : world
    requires { i_enbld w p }
  = { pc_a = (w.pc_a)[p<-CS] }


  predicate cs_enbld (w:world) (p:proc) = 
    w.pc_a[p] = CS 

  let ghost function cs (w:world) (p:proc) : world
    requires { cs_enbld w p }
  = { pc_a = w.pc_a[p<-Done] }



  (* Transition relation
   *)
  inductive stepind world world =
  | i : forall w :world, p :proc.
      i_enbld w p -> stepind w (i w p)
  | cs : forall w :world, p :proc.
      cs_enbld w p -> stepind w (cs w p)

  let ghost predicate step (w1:world) (w2:world) = stepind w1 w2 


  (* proof of inductiveness 
   *)
  clone export inductiveness.Inductiveness with
    type world,
    predicate inv,
    val step,
    val initWorld


  lemma safety : forall w :world. reachable w ->
    not (w.pc_a[Zero] = CS /\ w.pc_a[One] = CS)


end

